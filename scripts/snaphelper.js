// Generated by CoffeeScript 1.3.1
(function() {
  var SnapHelper;

  SnapHelper = (function() {

    function SnapHelper() {}

    SnapHelper.prototype.directionalSnap = function(obj_being_snapped, obj_snapped_to, direction, duration) {
      var obj1_pos, obj2_pos, snap_points;
      if (duration == null) {
        duration = 0;
      }
      obj1_pos = this.computeDetailedPosition(obj_being_snapped);
      obj2_pos = this.computeDetailedPosition(obj_snapped_to);
      return snap_points = this.getSnappablePoints(obj1_pos, obj2_pos);
    };

    SnapHelper.prototype.getMovementOffset = function(cp1, cp2, np1, np2) {
      var nleft_to_pleft, ntop_to_ptop;
      ntop_to_ptop = np1.y - cp1.y;
      nleft_to_pleft = np2.x - cp2.x;
      return {
        "top_offset": ntop_to_ptop,
        "left_offset": nleft_to_pleft
      };
    };

    SnapHelper.prototype.computeDetailedPosition = function(obj) {
      var bottom, bottom_left, bottom_right, details, height, left, pos, right, top, top_left, top_right, width;
      pos = obj.position();
      width = parseFloat(obj.width());
      height = parseFloat(obj.height());
      top = parseFloat(pos.top);
      left = parseFloat(pos.left);
      right = left + width;
      bottom = top + height;
      top_left = {
        "x": left,
        "y": top
      };
      top_right = {
        "x": right,
        "y": top
      };
      bottom_left = {
        "x": left,
        "y": bottom
      };
      bottom_right = {
        "x": right,
        "y": bottom
      };
      details = {
        "top_left": top_left,
        "top_right": top_right,
        "bottom_left": bottom_left,
        "bottom_right": bottom_right
      };
      return details;
    };

    SnapHelper.prototype.getSnappablePoints = function(being_snapped_details, snapped_to_details, direction) {
      var bs, points, st;
      bs = being_snapped_details;
      st = snapped_to_details;
      points = [];
      switch (direction) {
        case "right":
          points = [bs.top_right, bs.bottom_right, np.top_left, np.bottom_left];
          break;
        case "left":
          points = [bs.top_left, bs.bottom_left, np.top_right, np.bottom_right];
          break;
        case "top":
          points = [bs.top_left, bs.top_right, np.bottom_left, np.bottom_right];
          break;
        case "bottom":
          points = [bs.bottom_left, bs.bottom_right, np.top_left, np.top_right];
      }
      return points;
    };

    return SnapHelper;

  })();

}).call(this);
